package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/swelf19/tsqb/gen"
	"github.com/swelf19/tsqb/tsqbparser"
)

func makefilename(path string) string {
	newpath := strings.TrimSuffix(path, ".go") + "_gen.go"
	return newpath
}

func makeGenericTSQBFile(dirPath string, packageName string) {
	content := fmt.Sprintf(`// Code generated by tsqb. DO NOT EDIT.
	package %s

	type builders struct{}

	func Select() builders {
		return builders{}
	}

	func Insert() insertBuilders {
		return insertBuilders{}
	}
	
	type insertBuilders struct{}

	func Update() updateBuilders {
		return updateBuilders{}
	}
	
	type updateBuilders struct{}

	func Delete() deleteBuilders {
		return deleteBuilders{}
	}
	
	type deleteBuilders struct{}
	
	type field struct {
		FieldsName string
		TableName  string
	}
	`, packageName)
	err := ioutil.WriteFile(dirPath+"/tsqb_gen.go", []byte(content), 0644)
	if err != nil {
		log.Fatalln(err)
	}
}

func main() {
	affectedDirs := map[string]string{}
	err := filepath.Walk(os.Args[1],
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if !info.IsDir() {
				if !strings.HasSuffix(path, ".go") {
					return nil
				}
				pr, err := tsqbparser.ParseAST(path)
				if err != nil {
					log.Println(err)
					return err
				}
				if len(pr.StructMetaList) > 0 {
					// structs := gen.JoinTables(pr.StructMetaList)
					structs := pr.StructMetaList
					// if len(structs) > 0 {
					newFileName := makefilename(path)
					// fmt.Println(newFileName)
					packageName := tsqbparser.GetPackageName(path)
					filemeta := gen.NewFileMeta(structs, packageName, path, pr.ExtraImports)
					fileContent := filemeta.GenFileContent()
					err := ioutil.WriteFile(newFileName, []byte(fileContent), 0644)
					if err != nil {
						return err
					}
					// }
					//Получаем дирректорию обрабатываемого файла
					affectedDirs[filepath.Dir(path)] = packageName
				}
			}
			return nil
		})
	if err != nil {
		log.Println(err)
	}
	for dirName, packageName := range affectedDirs {
		makeGenericTSQBFile(dirName, packageName)
	}
}
