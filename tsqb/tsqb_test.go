package main

import (
	"go/format"
	"strings"
	"testing"

	"github.com/stretchr/testify/suite"
)

type GenFileTestSuite struct {
	suite.Suite
}

func (suite *GenFileTestSuite) SetupTest() {

}

func removeLeadingComment(src string) string {
	if strings.Contains(src, "Code generated by tsqb") {
		lines := strings.Split(src, "\n")
		src = strings.Join(lines[1:], "\n")
	}
	return src
}

func (suite *GenFileTestSuite) FormatAndCompare(expected, actual string) {
	a1, err := format.Source([]byte(expected))

	suite.Assert().NoError(err)
	a2, err := format.Source([]byte(actual))
	suite.Assert().NoError(err)
	// fmt.Println(actual)
	// fmt.Println(string(a2))
	// fmt.Println(diff.Diff(string(a1), string(a2)))
	suite.Equal(string(a1), string(a2))
}

// func (suite *GenFileTestSuite) TestGenFile() {
// 	path := "../devapp2/devapp.go"
// 	path_gen := "../devapp2/devapp_gen.go"
// 	pr, err := tsqbparser.ParseAST(path)
// 	structs := pr.StructMetaList
// 	suite.Assert().NoError(err)

// 	packageName := tsqbparser.GetPackageName(path)
// 	filemeta := gen.NewFileMeta(structs, packageName, path, pr.ExtraImports)

// 	fileContent := filemeta.GenFileContent()
// 	origContent, err := ioutil.ReadFile(path_gen)
// 	suite.Assert().NoError(err)
// 	suite.FormatAndCompare(removeLeadingComment(string(origContent)), removeLeadingComment(fileContent))

// }

func TestFileGeneration(t *testing.T) {
	suite.Run(t, new(GenFileTestSuite))
}
