package gen

import (
	"bytes"
	"fmt"
	"go/format"
	"strings"
	"text/template"
)

type FileMeta struct {
	Filename    string
	Filepath    string
	Imports     []string
	PackageName string
	Content     string
}

func NewFileMeta(s []StructMeta, packageName string, filename string, extraImports map[string]string) FileMeta {
	f := FileMeta{
		Imports: []string{
			// "bytes",
			"fmt",
			"strings",
			// "text/template",
			"github.com/swelf19/tsqb/qtypes",
			"github.com/swelf19/tsqb/qfuncs",
			"errors",
			"context",
		},
		PackageName: packageName,
		Content:     GenCode(s),
		// Content:  s.GenEntyreTemplate(),
		Filename: filename,
	}
	for k := range extraImports {
		f.Imports = append(f.Imports, extraImports[k])
	}
	return f
}

func GenCode(structs []StructMeta) string {
	Decls := []string{}
	for _, s := range structs {
		Decls = append(Decls,
			// s.GenEntryTemplate(),
			s.GenNewEntryTemplate(),
		)
	}
	fmt.Println(strings.Join(Decls, "\n"))
	return strings.Join(Decls, "\n")
}

func (f FileMeta) GenFileContent() string {
	templ := `// Code generated by tsqb from {{.BaseFileName}}. DO NOT EDIT.
	package {{.PackageName}}
	import (
		{{range .Imports}}
		"{{.}}"
		{{end}}
	)

	type builders struct{}

	func Select() builders {
		return builders{}
	}

	func Insert() insertBuilders {
		return insertBuilders{}
	}
	
	type insertBuilders struct{}

	func Update() updateBuilders {
		return updateBuilders{}
	}
	
	type updateBuilders struct{}

	func Delete() deleteBuilders {
		return deleteBuilders{}
	}
	
	type deleteBuilders struct{}
	
	type field struct {
		FieldsName string
		TableName  string
	}
	
	{{.Content}}
	`
	subQueryTemplate, err := template.New("subquery").Parse(templ)
	if err != nil {
		fmt.Println(err)
	}
	queryBuf := new(bytes.Buffer)
	err = subQueryTemplate.Execute(queryBuf, map[string]interface{}{
		"BaseFileName": f.Filename,
		"PackageName":  f.PackageName,
		"Imports":      f.Imports,
		"Content":      f.Content,
	})
	if err != nil {
		fmt.Println(err)
	}
	formattedContent, err := format.Source(queryBuf.Bytes())
	if err != nil {
		fmt.Println(err)
	}
	return string(formattedContent)
	// return string(queryBuf.String())
}
